/**
 * @file Firebase Security Rules for MÃ£eTech Conecta
 *
 * @corePhilosophy This ruleset enforces a user-ownership model for personal data (profiles, subscriptions, chats),
 * grants public read access to marketplace items and content, and restricts write access to owners or authorized users.
 *
 * @dataStructure
 * - `/users/{userId}`: User profile data, owned by the user.
 * - `/marketplace_items/{marketplaceItemId}`: Marketplace items, publicly readable, but writable only by the seller.
 * - `/content/{contentId}`: Content such as videos or posts, publicly readable, but writable only by the author.
 * - `/matches/{matchId}`: Match data between two users; access is open.
 * - `/users/{userId}/chats/{chatId}/messages/{messageId}`: Chat messages, only accessible to the participating users.
 * - `/users/{userId}/subscriptions/{subscriptionId}`: User subscriptions, owned by the user.
 * - `/roles_admin/{userId}`: Indicates whether a user has administrative privileges.
 *
 * @keySecurityDecisions
 * - Public read access is granted for `marketplace_items` and `content`. Writes are restricted to owners.
 * - User listing is not explicitly denied.
 * - Relational integrity checks are performed on `create` and `update` operations to ensure data consistency.
 * - The `roles_admin` collection uses an existence-based check to grant admin privileges.
 *
 * @denormalizationForAuthorization
 * - Marketplace items denormalize `sellerId` to enable owner-based write rules.
 * - Content items denormalize `authorId` to enable owner-based write rules.
 *
 * @structuralSegregation
 * - Private user data is stored under `/users/{userId}`, while public content and marketplace items are stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get, update, delete) User with ID 'user123' can access their profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (update, delete) User with ID 'user456' cannot modify or delete 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to marketplace items.
     * @path /marketplace_items/{marketplaceItemId}
     * @allow (get, list) Any user can read marketplace items.
     * @allow (create) User with ID 'user123' can create marketplace items with `sellerId` matching their ID.
     * @allow (update, delete) User with ID 'user123' can modify or delete their marketplace items.
     * @deny (create) User with ID 'user456' cannot create marketplace items for 'user123'.
     * @deny (update, delete) User with ID 'user456' cannot modify or delete marketplace items owned by 'user123'.
     * @principle Allows public read access but restricts write access to the item's seller.
     */
    match /marketplace_items/{marketplaceItemId} {
      function isOwner(sellerId) {
        return request.auth != null && request.auth.uid == sellerId;
      }

      function isExistingOwner(sellerId) {
          return isOwner(sellerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(request.resource.data.sellerId);
      allow update: if isExistingOwner(resource.data.sellerId);
      allow delete: if isExistingOwner(resource.data.sellerId);
    }

    /**
     * @description Controls access to content.
     * @path /content/{contentId}
     * @allow (get, list) Any user can read content.
     * @allow (create) User with ID 'user123' can create content with `authorId` matching their ID.
     * @allow (update, delete) User with ID 'user123' can modify or delete their content.
     * @deny (create) User with ID 'user456' cannot create content for 'user123'.
     * @deny (update, delete) User with ID 'user456' cannot modify or delete content owned by 'user123'.
     * @principle Allows public read access but restricts write access to the content's author.
     */
    match /content/{contentId} {
      function isOwner(authorId) {
        return request.auth != null && request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
          return isOwner(authorId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(request.resource.data.authorId);
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to match data between users.
     * @path /matches/{matchId}
     * @allow (get, list) Any user can read match data.
     * @allow create: if true;
     * @allow update: if true;
     * @allow delete: if true;
     * @principle Allows public read access.
     */
    match /matches/{matchId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Controls access to chat messages within a user's chat.
     * @path /users/{userId}/chats/{chatId}/messages/{messageId}
     * @allow (get, list) The owner of the chat can access the messages.
     * @allow (create) The owner of the chat can create new messages.
     * @allow (update, delete) The owner of the chat can update or delete existing messages.
     * @deny (create) User with ID 'user456' cannot create a chat message for 'user123'.
     * @deny (update, delete) User with ID 'user456' cannot modify or delete chat messages owned by 'user123'.
     * @principle Enforces document ownership for chat messages.
     */
    match /users/{userId}/chats/{chatId}/messages/{messageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to subscription data for a user.
     * @path /users/{userId}/subscriptions/{subscriptionId}
     * @allow (get, list) The owner of the subscription can access it.
     * @allow (create) The owner of the subscription can create a new subscription.
     * @allow (update, delete) The owner of the subscription can update or delete their subscription.
     * @deny (create) User with ID 'user456' cannot create a subscription for 'user123'.
     * @deny (update, delete) User with ID 'user456' cannot modify or delete subscription of 'user123'.
     * @principle Enforces document ownership for subscriptions.
     */
    match /users/{userId}/subscriptions/{subscriptionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to admin roles. The existence of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (get) Any authenticated user can check if a user is an admin.
     * @allow (create) Only authenticated users can grant admin privileges.
     * @allow (update, delete) Only authenticated users can revoke admin privileges.
     * @deny (create) Non-authenticated users cannot create admin roles.
     *
     * @principle Uses existence-based rules to grant admin privileges.
     */
     match /roles_admin/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if isSignedIn();
     }
  }
}